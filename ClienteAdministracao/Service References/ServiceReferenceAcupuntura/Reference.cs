//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClienteAdministracao.ServiceReferenceAcupuntura {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UtilizadorWEB", Namespace="http://schemas.datacontract.org/2004/07/AcupunturaWebService")]
    [System.SerializableAttribute()]
    public partial class UtilizadorWEB : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isAdmin {
            get {
                return this.isAdminField;
            }
            set {
                if ((this.isAdminField.Equals(value) != true)) {
                    this.isAdminField = value;
                    this.RaisePropertyChanged("isAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SintomaWEB", Namespace="http://schemas.datacontract.org/2004/07/AcupunturaWebService")]
    [System.SerializableAttribute()]
    public partial class SintomaWEB : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nomeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nome {
            get {
                return this.nomeField;
            }
            set {
                if ((object.ReferenceEquals(this.nomeField, value) != true)) {
                    this.nomeField = value;
                    this.RaisePropertyChanged("nome");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DiagnosticoWEB", Namespace="http://schemas.datacontract.org/2004/07/AcupunturaWebService")]
    [System.SerializableAttribute()]
    public partial class DiagnosticoWEB : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descricaoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ClienteAdministracao.ServiceReferenceAcupuntura.SintomaWEB[] listaSintomasField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nomeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string orgaoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string tratamentoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string descricao {
            get {
                return this.descricaoField;
            }
            set {
                if ((object.ReferenceEquals(this.descricaoField, value) != true)) {
                    this.descricaoField = value;
                    this.RaisePropertyChanged("descricao");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClienteAdministracao.ServiceReferenceAcupuntura.SintomaWEB[] listaSintomas {
            get {
                return this.listaSintomasField;
            }
            set {
                if ((object.ReferenceEquals(this.listaSintomasField, value) != true)) {
                    this.listaSintomasField = value;
                    this.RaisePropertyChanged("listaSintomas");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nome {
            get {
                return this.nomeField;
            }
            set {
                if ((object.ReferenceEquals(this.nomeField, value) != true)) {
                    this.nomeField = value;
                    this.RaisePropertyChanged("nome");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string orgao {
            get {
                return this.orgaoField;
            }
            set {
                if ((object.ReferenceEquals(this.orgaoField, value) != true)) {
                    this.orgaoField = value;
                    this.RaisePropertyChanged("orgao");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string tratamento {
            get {
                return this.tratamentoField;
            }
            set {
                if ((object.ReferenceEquals(this.tratamentoField, value) != true)) {
                    this.tratamentoField = value;
                    this.RaisePropertyChanged("tratamento");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PacienteWEB", Namespace="http://schemas.datacontract.org/2004/07/AcupunturaWebService")]
    [System.SerializableAttribute()]
    public partial class PacienteWEB : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int biField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime dataNascimentoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nomeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int bi {
            get {
                return this.biField;
            }
            set {
                if ((this.biField.Equals(value) != true)) {
                    this.biField = value;
                    this.RaisePropertyChanged("bi");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime dataNascimento {
            get {
                return this.dataNascimentoField;
            }
            set {
                if ((this.dataNascimentoField.Equals(value) != true)) {
                    this.dataNascimentoField = value;
                    this.RaisePropertyChanged("dataNascimento");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nome {
            get {
                return this.nomeField;
            }
            set {
                if ((object.ReferenceEquals(this.nomeField, value) != true)) {
                    this.nomeField = value;
                    this.RaisePropertyChanged("nome");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TerapeutaWEB", Namespace="http://schemas.datacontract.org/2004/07/AcupunturaWebService")]
    [System.SerializableAttribute()]
    public partial class TerapeutaWEB : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int biField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime dataNascimentoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nomeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int bi {
            get {
                return this.biField;
            }
            set {
                if ((this.biField.Equals(value) != true)) {
                    this.biField = value;
                    this.RaisePropertyChanged("bi");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime dataNascimento {
            get {
                return this.dataNascimentoField;
            }
            set {
                if ((this.dataNascimentoField.Equals(value) != true)) {
                    this.dataNascimentoField = value;
                    this.RaisePropertyChanged("dataNascimento");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nome {
            get {
                return this.nomeField;
            }
            set {
                if ((object.ReferenceEquals(this.nomeField, value) != true)) {
                    this.nomeField = value;
                    this.RaisePropertyChanged("nome");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceAcupuntura.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/logIn", ReplyAction="http://tempuri.org/IService1/logInResponse")]
        string logIn(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/logIn", ReplyAction="http://tempuri.org/IService1/logInResponse")]
        System.Threading.Tasks.Task<string> logInAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/logOut", ReplyAction="http://tempuri.org/IService1/logOutResponse")]
        void logOut(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/logOut", ReplyAction="http://tempuri.org/IService1/logOutResponse")]
        System.Threading.Tasks.Task logOutAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isAdmin", ReplyAction="http://tempuri.org/IService1/isAdminResponse")]
        bool isAdmin(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isAdmin", ReplyAction="http://tempuri.org/IService1/isAdminResponse")]
        System.Threading.Tasks.Task<bool> isAdminAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isLoggedIn", ReplyAction="http://tempuri.org/IService1/isLoggedInResponse")]
        bool isLoggedIn(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isLoggedIn", ReplyAction="http://tempuri.org/IService1/isLoggedInResponse")]
        System.Threading.Tasks.Task<bool> isLoggedInAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllUtilizadores", ReplyAction="http://tempuri.org/IService1/getAllUtilizadoresResponse")]
        ClienteAdministracao.ServiceReferenceAcupuntura.UtilizadorWEB[] getAllUtilizadores(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllUtilizadores", ReplyAction="http://tempuri.org/IService1/getAllUtilizadoresResponse")]
        System.Threading.Tasks.Task<ClienteAdministracao.ServiceReferenceAcupuntura.UtilizadorWEB[]> getAllUtilizadoresAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/writeToXml", ReplyAction="http://tempuri.org/IService1/writeToXmlResponse")]
        void writeToXml(string token, ClienteAdministracao.ServiceReferenceAcupuntura.SintomaWEB[] listaSintomas, ClienteAdministracao.ServiceReferenceAcupuntura.DiagnosticoWEB[] listaDiagnosticos);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/writeToXml", ReplyAction="http://tempuri.org/IService1/writeToXmlResponse")]
        System.Threading.Tasks.Task writeToXmlAsync(string token, ClienteAdministracao.ServiceReferenceAcupuntura.SintomaWEB[] listaSintomas, ClienteAdministracao.ServiceReferenceAcupuntura.DiagnosticoWEB[] listaDiagnosticos);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/adicionarPaciente", ReplyAction="http://tempuri.org/IService1/adicionarPacienteResponse")]
        bool adicionarPaciente(string token, string nome, int bi, System.DateTime dataNascimento);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/adicionarPaciente", ReplyAction="http://tempuri.org/IService1/adicionarPacienteResponse")]
        System.Threading.Tasks.Task<bool> adicionarPacienteAsync(string token, string nome, int bi, System.DateTime dataNascimento);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/adicionarTerapeuta", ReplyAction="http://tempuri.org/IService1/adicionarTerapeutaResponse")]
        bool adicionarTerapeuta(string token, string nome, int bi, System.DateTime dataNascimento, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/adicionarTerapeuta", ReplyAction="http://tempuri.org/IService1/adicionarTerapeutaResponse")]
        System.Threading.Tasks.Task<bool> adicionarTerapeutaAsync(string token, string nome, int bi, System.DateTime dataNascimento, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/adicionarAdministrador", ReplyAction="http://tempuri.org/IService1/adicionarAdministradorResponse")]
        bool adicionarAdministrador(string token, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/adicionarAdministrador", ReplyAction="http://tempuri.org/IService1/adicionarAdministradorResponse")]
        System.Threading.Tasks.Task<bool> adicionarAdministradorAsync(string token, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getPacientePorBi", ReplyAction="http://tempuri.org/IService1/getPacientePorBiResponse")]
        ClienteAdministracao.ServiceReferenceAcupuntura.PacienteWEB getPacientePorBi(string token, int bi, int idTerapeuta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getPacientePorBi", ReplyAction="http://tempuri.org/IService1/getPacientePorBiResponse")]
        System.Threading.Tasks.Task<ClienteAdministracao.ServiceReferenceAcupuntura.PacienteWEB> getPacientePorBiAsync(string token, int bi, int idTerapeuta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getTerapeutaPorBi", ReplyAction="http://tempuri.org/IService1/getTerapeutaPorBiResponse")]
        ClienteAdministracao.ServiceReferenceAcupuntura.TerapeutaWEB getTerapeutaPorBi(string token, int bi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getTerapeutaPorBi", ReplyAction="http://tempuri.org/IService1/getTerapeutaPorBiResponse")]
        System.Threading.Tasks.Task<ClienteAdministracao.ServiceReferenceAcupuntura.TerapeutaWEB> getTerapeutaPorBiAsync(string token, int bi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/removerPaciente", ReplyAction="http://tempuri.org/IService1/removerPacienteResponse")]
        bool removerPaciente(string token, int bi, int idTerapeuta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/removerPaciente", ReplyAction="http://tempuri.org/IService1/removerPacienteResponse")]
        System.Threading.Tasks.Task<bool> removerPacienteAsync(string token, int bi, int idTerapeuta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/removerTerapeuta", ReplyAction="http://tempuri.org/IService1/removerTerapeutaResponse")]
        bool removerTerapeuta(string token, int bi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/removerTerapeuta", ReplyAction="http://tempuri.org/IService1/removerTerapeutaResponse")]
        System.Threading.Tasks.Task<bool> removerTerapeutaAsync(string token, int bi);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/editarPaciente", ReplyAction="http://tempuri.org/IService1/editarPacienteResponse")]
        bool editarPaciente(string token, int idTerapeuta, string nome, int bi, System.DateTime dataNascimento);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/editarPaciente", ReplyAction="http://tempuri.org/IService1/editarPacienteResponse")]
        System.Threading.Tasks.Task<bool> editarPacienteAsync(string token, int idTerapeuta, string nome, int bi, System.DateTime dataNascimento);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/editarTerapeuta", ReplyAction="http://tempuri.org/IService1/editarTerapeutaResponse")]
        bool editarTerapeuta(string token, string nome, int bi, System.DateTime dataNascimento, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/editarTerapeuta", ReplyAction="http://tempuri.org/IService1/editarTerapeutaResponse")]
        System.Threading.Tasks.Task<bool> editarTerapeutaAsync(string token, string nome, int bi, System.DateTime dataNascimento, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListaSintomasXml", ReplyAction="http://tempuri.org/IService1/getListaSintomasXmlResponse")]
        ClienteAdministracao.ServiceReferenceAcupuntura.SintomaWEB[] getListaSintomasXml(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListaSintomasXml", ReplyAction="http://tempuri.org/IService1/getListaSintomasXmlResponse")]
        System.Threading.Tasks.Task<ClienteAdministracao.ServiceReferenceAcupuntura.SintomaWEB[]> getListaSintomasXmlAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllDiagnosticosXml", ReplyAction="http://tempuri.org/IService1/getAllDiagnosticosXmlResponse")]
        string[] getAllDiagnosticosXml(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllDiagnosticosXml", ReplyAction="http://tempuri.org/IService1/getAllDiagnosticosXmlResponse")]
        System.Threading.Tasks.Task<string[]> getAllDiagnosticosXmlAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getTerapeutaID", ReplyAction="http://tempuri.org/IService1/getTerapeutaIDResponse")]
        ClienteAdministracao.ServiceReferenceAcupuntura.TerapeutaWEB getTerapeutaID(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getTerapeutaID", ReplyAction="http://tempuri.org/IService1/getTerapeutaIDResponse")]
        System.Threading.Tasks.Task<ClienteAdministracao.ServiceReferenceAcupuntura.TerapeutaWEB> getTerapeutaIDAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUtilizadorIdTerapeura", ReplyAction="http://tempuri.org/IService1/getUtilizadorIdTerapeuraResponse")]
        ClienteAdministracao.ServiceReferenceAcupuntura.UtilizadorWEB getUtilizadorIdTerapeura(string token, int idTerapeuta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUtilizadorIdTerapeura", ReplyAction="http://tempuri.org/IService1/getUtilizadorIdTerapeuraResponse")]
        System.Threading.Tasks.Task<ClienteAdministracao.ServiceReferenceAcupuntura.UtilizadorWEB> getUtilizadorIdTerapeuraAsync(string token, int idTerapeuta);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListaDiagnosticosXml", ReplyAction="http://tempuri.org/IService1/getListaDiagnosticosXmlResponse")]
        string[] getListaDiagnosticosXml(string token, ClienteAdministracao.ServiceReferenceAcupuntura.SintomaWEB[] listaSintomasWeb);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListaDiagnosticosXml", ReplyAction="http://tempuri.org/IService1/getListaDiagnosticosXmlResponse")]
        System.Threading.Tasks.Task<string[]> getListaDiagnosticosXmlAsync(string token, ClienteAdministracao.ServiceReferenceAcupuntura.SintomaWEB[] listaSintomasWeb);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/validaXml", ReplyAction="http://tempuri.org/IService1/validaXmlResponse")]
        string validaXml(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/validaXml", ReplyAction="http://tempuri.org/IService1/validaXmlResponse")]
        System.Threading.Tasks.Task<string> validaXmlAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ClienteAdministracao.ServiceReferenceAcupuntura.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ClienteAdministracao.ServiceReferenceAcupuntura.IService1>, ClienteAdministracao.ServiceReferenceAcupuntura.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string logIn(string username, string password) {
            return base.Channel.logIn(username, password);
        }
        
        public System.Threading.Tasks.Task<string> logInAsync(string username, string password) {
            return base.Channel.logInAsync(username, password);
        }
        
        public void logOut(string token) {
            base.Channel.logOut(token);
        }
        
        public System.Threading.Tasks.Task logOutAsync(string token) {
            return base.Channel.logOutAsync(token);
        }
        
        public bool isAdmin(string token) {
            return base.Channel.isAdmin(token);
        }
        
        public System.Threading.Tasks.Task<bool> isAdminAsync(string token) {
            return base.Channel.isAdminAsync(token);
        }
        
        public bool isLoggedIn(string token) {
            return base.Channel.isLoggedIn(token);
        }
        
        public System.Threading.Tasks.Task<bool> isLoggedInAsync(string token) {
            return base.Channel.isLoggedInAsync(token);
        }
        
        public ClienteAdministracao.ServiceReferenceAcupuntura.UtilizadorWEB[] getAllUtilizadores(string token) {
            return base.Channel.getAllUtilizadores(token);
        }
        
        public System.Threading.Tasks.Task<ClienteAdministracao.ServiceReferenceAcupuntura.UtilizadorWEB[]> getAllUtilizadoresAsync(string token) {
            return base.Channel.getAllUtilizadoresAsync(token);
        }
        
        public void writeToXml(string token, ClienteAdministracao.ServiceReferenceAcupuntura.SintomaWEB[] listaSintomas, ClienteAdministracao.ServiceReferenceAcupuntura.DiagnosticoWEB[] listaDiagnosticos) {
            base.Channel.writeToXml(token, listaSintomas, listaDiagnosticos);
        }
        
        public System.Threading.Tasks.Task writeToXmlAsync(string token, ClienteAdministracao.ServiceReferenceAcupuntura.SintomaWEB[] listaSintomas, ClienteAdministracao.ServiceReferenceAcupuntura.DiagnosticoWEB[] listaDiagnosticos) {
            return base.Channel.writeToXmlAsync(token, listaSintomas, listaDiagnosticos);
        }
        
        public bool adicionarPaciente(string token, string nome, int bi, System.DateTime dataNascimento) {
            return base.Channel.adicionarPaciente(token, nome, bi, dataNascimento);
        }
        
        public System.Threading.Tasks.Task<bool> adicionarPacienteAsync(string token, string nome, int bi, System.DateTime dataNascimento) {
            return base.Channel.adicionarPacienteAsync(token, nome, bi, dataNascimento);
        }
        
        public bool adicionarTerapeuta(string token, string nome, int bi, System.DateTime dataNascimento, string username, string password) {
            return base.Channel.adicionarTerapeuta(token, nome, bi, dataNascimento, username, password);
        }
        
        public System.Threading.Tasks.Task<bool> adicionarTerapeutaAsync(string token, string nome, int bi, System.DateTime dataNascimento, string username, string password) {
            return base.Channel.adicionarTerapeutaAsync(token, nome, bi, dataNascimento, username, password);
        }
        
        public bool adicionarAdministrador(string token, string username, string password) {
            return base.Channel.adicionarAdministrador(token, username, password);
        }
        
        public System.Threading.Tasks.Task<bool> adicionarAdministradorAsync(string token, string username, string password) {
            return base.Channel.adicionarAdministradorAsync(token, username, password);
        }
        
        public ClienteAdministracao.ServiceReferenceAcupuntura.PacienteWEB getPacientePorBi(string token, int bi, int idTerapeuta) {
            return base.Channel.getPacientePorBi(token, bi, idTerapeuta);
        }
        
        public System.Threading.Tasks.Task<ClienteAdministracao.ServiceReferenceAcupuntura.PacienteWEB> getPacientePorBiAsync(string token, int bi, int idTerapeuta) {
            return base.Channel.getPacientePorBiAsync(token, bi, idTerapeuta);
        }
        
        public ClienteAdministracao.ServiceReferenceAcupuntura.TerapeutaWEB getTerapeutaPorBi(string token, int bi) {
            return base.Channel.getTerapeutaPorBi(token, bi);
        }
        
        public System.Threading.Tasks.Task<ClienteAdministracao.ServiceReferenceAcupuntura.TerapeutaWEB> getTerapeutaPorBiAsync(string token, int bi) {
            return base.Channel.getTerapeutaPorBiAsync(token, bi);
        }
        
        public bool removerPaciente(string token, int bi, int idTerapeuta) {
            return base.Channel.removerPaciente(token, bi, idTerapeuta);
        }
        
        public System.Threading.Tasks.Task<bool> removerPacienteAsync(string token, int bi, int idTerapeuta) {
            return base.Channel.removerPacienteAsync(token, bi, idTerapeuta);
        }
        
        public bool removerTerapeuta(string token, int bi) {
            return base.Channel.removerTerapeuta(token, bi);
        }
        
        public System.Threading.Tasks.Task<bool> removerTerapeutaAsync(string token, int bi) {
            return base.Channel.removerTerapeutaAsync(token, bi);
        }
        
        public bool editarPaciente(string token, int idTerapeuta, string nome, int bi, System.DateTime dataNascimento) {
            return base.Channel.editarPaciente(token, idTerapeuta, nome, bi, dataNascimento);
        }
        
        public System.Threading.Tasks.Task<bool> editarPacienteAsync(string token, int idTerapeuta, string nome, int bi, System.DateTime dataNascimento) {
            return base.Channel.editarPacienteAsync(token, idTerapeuta, nome, bi, dataNascimento);
        }
        
        public bool editarTerapeuta(string token, string nome, int bi, System.DateTime dataNascimento, string username, string password) {
            return base.Channel.editarTerapeuta(token, nome, bi, dataNascimento, username, password);
        }
        
        public System.Threading.Tasks.Task<bool> editarTerapeutaAsync(string token, string nome, int bi, System.DateTime dataNascimento, string username, string password) {
            return base.Channel.editarTerapeutaAsync(token, nome, bi, dataNascimento, username, password);
        }
        
        public ClienteAdministracao.ServiceReferenceAcupuntura.SintomaWEB[] getListaSintomasXml(string token) {
            return base.Channel.getListaSintomasXml(token);
        }
        
        public System.Threading.Tasks.Task<ClienteAdministracao.ServiceReferenceAcupuntura.SintomaWEB[]> getListaSintomasXmlAsync(string token) {
            return base.Channel.getListaSintomasXmlAsync(token);
        }
        
        public string[] getAllDiagnosticosXml(string token) {
            return base.Channel.getAllDiagnosticosXml(token);
        }
        
        public System.Threading.Tasks.Task<string[]> getAllDiagnosticosXmlAsync(string token) {
            return base.Channel.getAllDiagnosticosXmlAsync(token);
        }
        
        public ClienteAdministracao.ServiceReferenceAcupuntura.TerapeutaWEB getTerapeutaID(string token) {
            return base.Channel.getTerapeutaID(token);
        }
        
        public System.Threading.Tasks.Task<ClienteAdministracao.ServiceReferenceAcupuntura.TerapeutaWEB> getTerapeutaIDAsync(string token) {
            return base.Channel.getTerapeutaIDAsync(token);
        }
        
        public ClienteAdministracao.ServiceReferenceAcupuntura.UtilizadorWEB getUtilizadorIdTerapeura(string token, int idTerapeuta) {
            return base.Channel.getUtilizadorIdTerapeura(token, idTerapeuta);
        }
        
        public System.Threading.Tasks.Task<ClienteAdministracao.ServiceReferenceAcupuntura.UtilizadorWEB> getUtilizadorIdTerapeuraAsync(string token, int idTerapeuta) {
            return base.Channel.getUtilizadorIdTerapeuraAsync(token, idTerapeuta);
        }
        
        public string[] getListaDiagnosticosXml(string token, ClienteAdministracao.ServiceReferenceAcupuntura.SintomaWEB[] listaSintomasWeb) {
            return base.Channel.getListaDiagnosticosXml(token, listaSintomasWeb);
        }
        
        public System.Threading.Tasks.Task<string[]> getListaDiagnosticosXmlAsync(string token, ClienteAdministracao.ServiceReferenceAcupuntura.SintomaWEB[] listaSintomasWeb) {
            return base.Channel.getListaDiagnosticosXmlAsync(token, listaSintomasWeb);
        }
        
        public string validaXml(string token) {
            return base.Channel.validaXml(token);
        }
        
        public System.Threading.Tasks.Task<string> validaXmlAsync(string token) {
            return base.Channel.validaXmlAsync(token);
        }
    }
}
